{"version":3,"sources":["socket/Socket.js","actions/actions.js","pages/Online/onlineComponents/helperFunctions.js","pages/Online/onlineComponents/Lobby.js","utils/UserContext.js","pages/Online/onlineComponents/Prompt.js","pages/Online/onlineComponents/Response.js","pages/Online/onlineComponents/Match.js","pages/Online/onlineComponents/RoundResults.js","pages/Online/onlineComponents/FinalResults.js","pages/Online/index.js","pages/Offline/index.js","components/SelectAvatar/index.js","pages/Title/index.js","components/colorBox/index.js","reducers/error.js","reducers/root.js","reducers/gameInfo.js","reducers/userInfo.js","App.js","index.js"],"names":["socket","connectToServer","dispatch","io","reconnection","on","console","log","gameInfo","userInfo","setGameInfo","setUserInfo","err","type","payload","setError","error","turnUserInfoIntoArray","useSelector","state","users","key","push","Object","objectSpread","userName","getUsers","map","user","o","react_default","a","createElement","className","id","src","avatar","alt","concat","currentScore","Lobby","useDispatch","handleStartRound","e","gameID","preventDefault","emit","data","onClick","UserContext","createContext","UserProvider","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","token","localStorage","getItem","isAuthenticated","userId","userWins","userAvatar","changeUserName","bind","assertThisInitialized","changeAvatar","changeWins","changeAuthenticated","changeUserId","changeToken","getUser","updateUser","setState","wins","removeItem","setItem","_this2","Axios","get","headers","Content-type","x-auth-token","then","result","_result$data","catch","obj","inputData","put","Provider","value","children","Component","Prompt","useContext","_useState","useState","_useState2","slicedToArray","promptInput","setPromptInput","handlePromptSubmit","prompt","promptOnChange","target","round","promptMaster","onSubmit","onChange","htmlFor","view","Response","responseInput","setResponseInput","handleResponseSubmit","response","submitResponse","responseOnChange","shuffle","require","Match","handleMatchSubmit","match","name","submitMatch","userClass","dragEvents","onDragOver","ev","parentNode","classList","add","onDragEnter","onDragLeave","remove","onDrop","dataTransfer","getData","assign","getResponses","responseList","draggable","onDragStart","setData","RoundResults","handleNextRoundSubmit","handleGameEndSubmit","handleReturnToLobbySubmit","OnlineGame","gameState","FinalResults_RoundResults","renderGame","OfflineGame","input","setInput","_useState3","_useState4","_useState5","_useState6","setGameState","_useState7","promptmaster","matcher","players","roundQuestion","_useState8","roundState","useEffect","gameId","participants","for","enteredParticipants","toConsumableArray","newParticipant","score","position","isEliminated","createParticipant","SelectAvatar","imgPath","substring","lastIndexOf","indexOf","Title","_useContext","inputType","setInputType","loginError","setLoginError","signupError","setSignupError","redirect","setRedirect","pwInput","useRef","emailInput","_useState9","_useState10","gameIDInput","setGameIDInput","setUser","val","email","current","password","post","_id","copyBtn","readOnly","copyText","document","querySelector","select","setSelectionRange","execCommand","alert","copyGameID","showPassword","gameIDChange","item","index","components_SelectAvatar","newGame","window","location","newOnlineGame","joinGame","joinOnlineGame","Link","to","enterBtn","isLoggedIn","ref","required","aria-hidden","showForm","Redirect","href","Color","defaultError","rootReducer","combineReducers","arguments","length","undefined","action","store","createStore","applyMiddleware","thunk","App","es","UserContext_UserProvider","BrowserRouter","Switch","Route","exact","path","component","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.79890240.chunk.js","sourcesContent":["import io from 'socket.io-client';\nimport { setGameInfo, setUserInfo } from '../actions/actions'\n\nexport let socket = null;\n\nexport function connectToServer(dispatch) {\n  socket = io('localhost:3000', { reconnection: false });\n\n  socket.on('connect', () => {\n    console.log('Socket connected');\n  });\n\n  socket.on('connect_error', () => {\n    socket = null;\n    console.log('Failed to connect');\n  });\n\n  socket.on('update', (gameInfo, userInfo) => {\n    dispatch(setGameInfo(gameInfo));\n    dispatch(setUserInfo(userInfo));\n  });\n\n  socket.on('backendError', (err) => {\n    console.log(err);\n  });\n}","import { socket, connectToServer } from '../socket/Socket';\n\nexport function setGameInfo(gameInfo) {\n  return { type: 'gameInfo', payload: gameInfo }\n}\n\nexport function setUserInfo(userInfo) {\n  return { type: 'userInfo', payload: userInfo }\n}\n\nexport function setError(error) {\n  return { type: 'error', payload: error }\n}\n\nexport function newGame(userName, userAvatar) {\n  return (dispatch) => {\n     \n    connectToServer(dispatch);\n    \n      socket.emit('newGame', userName, userAvatar);\n\n      socket.on('addedToGame', (gameInfo, userInfo) => {\n        console.log(gameInfo);\n        dispatch(setGameInfo(gameInfo));\n        dispatch(setUserInfo(userInfo));\n        dispatch(setError(''));\n        console.log(\"creating game\");\n      });\n\n      socket.on('backendError', data => {\n        dispatch(setError('Error with gameID'));\n      });\n    \n  }\n}\n\nexport function joinGame(gameID, userName, userAvatar) {\n  return (dispatch) => {\n\n    connectToServer(dispatch);\n    \n      socket.emit('joinGame', gameID, userName);\n\n      socket.on('addedToGame', (gameInfo, userInfo) => {\n        dispatch(setGameInfo(gameInfo));\n        dispatch(setUserInfo(userInfo));\n        dispatch(setError(''));\n        console.log('added to game');\n        console.log(gameInfo, userInfo);\n      });\n\n      socket.on('noGameFound', data => {\n        dispatch(setError('Could not find the game'));\n      });\n\n      socket.on('gameInProgress', data => {\n        dispatch(setError('Game is already in progress'));\n      });\n    \n  }\n}\n\nexport function startRound(gameID) {\n  return (dispatch) => {\n    socket.emit('startRound', gameID);\n\n    socket.on('notEnoughUsers', data => {\n      dispatch(setError('Insufficient Players'));\n    })\n  }\n}\n\nexport function submitPrompt(gameID, prompt) {\n  return (dispatch) => {\n    socket.emit('submittedPrompt', gameID, prompt);\n  }\n}\n\nexport function submitResponse(gameID, userName, response) {\n  return (dispatch) => {\n    socket.emit('submittedResponse', gameID, userName, response);\n  }\n}\n\nexport function submitMatch(gameID, userName, match) {\n  return (dispatch) => {\n    socket.emit('matched', gameID, userName, match);\n  }\n}\n\nexport function nextRound (gameID) {\n  return (dispatch) => {\n    socket.emit('nextRound', gameID);\n  }\n}\n\nexport function gameEnd(gameID) {\n  return (dispatch) => {\n    socket.emit('gameEnd', gameID);\n  }\n}\n\nexport function returnToLobby(gameID) {\n  return (dispatch) => {\n    socket.emit('returnToLobby', gameID)\n  }\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nexport function turnUserInfoIntoArray() {\n    const userInfo = useSelector(state => state.userInfo);\n    let users = [];\n    for (let key in userInfo) {\n        users.push({\n            userName: key,\n            ...userInfo[key]\n        })\n    }\n    return users;\n}\n\nexport function getUsers() {\n    return turnUserInfoIntoArray().map(user)\n}\n\nfunction user(o) {\n    let userClass = \"player\";\n    \n    return(\n        <div className={userClass} key={o.userName} id={o.userName}>\n            <img src={o.avatar} alt={`${o.userName}'s Avatar`} className=\"playerAvatar lvl1\"/>\n            <h3 className=\"playerName\">{o.userName}</h3>\n            <p className=\"playerScore lvl2\">{o.currentScore}</p>\n        </div>\n    )\n}\n\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { startRound } from '../../../actions/actions';\nimport { getUsers } from './helperFunctions';\nimport '../style.css';\n\nexport default function Lobby() {\n    const gameInfo = useSelector(state => {\n      console.log('state:', state);\n      return state.gameInfo;\n    });\n    \n    const dispatch = useDispatch();\n\n    function handleStartRound(e) {\n        e.preventDefault();\n        console.log(gameInfo);\n        dispatch(startRound(gameInfo.gameID));\n    }\n\n    return (\n      <div className='gameBoard'>\n        <div className='headerArea'>\n            <h1>Game Code: {gameInfo.gameID}</h1>\n            <h2>Number of Players: {gameInfo.users}</h2>\n        </div>\n        <div className='responseArea'>\n        </div>\n        <div className='playerArea'>\n          {getUsers()}\n        </div>\n        <div className='actions'>\n          <button onClick={(e) => handleStartRound(e)}>Start Game!</button>\n        </div>   \n      </div>\n    );\n}\n\n","import React, {Component, createContext} from 'react';\nimport Axios from 'axios';\n\nexport const UserContext = createContext();\n\nexport default class UserProvider extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      token: localStorage.getItem('thingsAuthToken') || null,\n      isAuthenticated: (localStorage.getItem('thingsAuthToken') ? true : false),\n      userId: localStorage.getItem('thingsUserId') || '',\n      userName: 'Set Your Username!',\n      userWins: 0,\n      userAvatar: ''\n    }\n    this.changeUserName = this.changeUserName.bind(this);\n    this.changeAvatar = this.changeAvatar.bind(this);\n    this.changeWins = this.changeWins.bind(this);\n    this.changeAuthenticated = this.changeAuthenticated.bind(this);\n    this.changeUserId = this.changeUserId.bind(this);\n    this.changeToken = this.changeToken.bind(this);\n    this.getUser = this.getUser.bind(this);\n    this.updateUser = this.updateUser.bind(this);\n  }\n  changeUserName(a){\n    this.setState({...this.state, userName: a})\n  }\n  changeAvatar(a){\n    this.setState({...this.state, userAvatar: a})\n    this.updateUser({...this.state, userAvatar: a}, this.state.userId, this.state.token)\n  }\n  changeWins(a){\n    this.setState({...this.state, userWins: (this.state.userWins + a)})\n    this.updateUser({...this.state, wins: (this.state.userWins + a)}, this.state.userId, this.state.token)\n  }\n  changeAuthenticated(token,userId){\n    if(this.state.isAuthenticated === true){\n      localStorage.removeItem('thingsAuthToken')\n      this.setState({\n        ...this.state,\n        userName: '',\n        token: '',\n        userId: '',\n        userWins: 0,\n        userAvatar: '',\n        isAuthenticated: false\n      });\n    } else {\n      localStorage.setItem('thingsAuthToken', token)\n      // i'm setting the userId in it's own setter bc then I can save it in localStorage\n      this.changeUserId(userId);\n      this.setState({\n        ...this.state,\n        isAuthenticated: true,\n        token\n      });\n      this.getUser(token, userId);\n    }\n  }\n  changeToken(a){\n    this.setState({...this.state, token: a})\n    localStorage.setItem('thingsAuthToken', a)\n  }\n  changeUserId(a){\n    this.setState({...this.state, userId: a})\n    localStorage.setItem('thingsUserId', a)\n  }\n\n  //gets the user info from the db. This is called as soon as the user is authenticated.\n  getUser(token, id){\n    Axios.get(`/user/${id}`, {\n      headers: {\n        'Content-type': 'application/json',\n        'x-auth-token': token\n      }\n    })\n    .then(result => {\n      const {wins, userName, avatar} = result.data;\n      this.changeUserName(userName);\n      this.changeWins(wins);\n      this.changeAvatar(avatar);\n    })\n    .catch(err => console.log(err));\n  };\n  //updates the user in the db\n  updateUser(obj, id, token){\n    const inputData = {\n      userName: obj.userName,\n      wins: obj.userWins,\n      avatar: obj.userAvatar\n    }\n    Axios.put(`/user/${id}`, inputData, {\n      headers: {\n        'Content-type': 'application/json',\n        'x-auth-token': token\n      }\n    })\n    .then(()=>{});\n  }\n\n  componentDidMount(){\n    if(this.state.userId && this.state.token) this.getUser(this.state.token, this.state.userId); \n  }\n  \n\n\n  render(){\n    return(\n      <UserContext.Provider \n        value={{...this.state, \n        changeAuthenticated: this.changeAuthenticated, \n        changeToken: this.changeToken,\n        changeUserId: this.changeUserId,\n        changeAvatar: this.changeAvatar,\n        getUser: this.getUser\n      }}\n      >\n\n        {this.props.children}\n\n      </UserContext.Provider>\n    );\n  }\n}","import React, { useContext, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { submitPrompt } from '../../../actions/actions';\nimport { UserContext } from '../../../utils/UserContext';\nimport { getUsers } from './helperFunctions';\nimport '../style.css';\n\nexport default function Prompt() {\n    const gameInfo = useSelector(state => state.gameInfo);\n    const userInfo = useSelector(state => state.userInfo);\n    const dispatch = useDispatch();\n    const { userName } = useContext(UserContext);\n\n    const [promptInput, setPromptInput] = useState('');\n\n    function handlePromptSubmit(e) {\n        e.preventDefault();\n        dispatch(submitPrompt(gameInfo.gameID, promptInput));\n        setPromptInput('');\n    }\n\n    function promptOnChange(e) {\n        setPromptInput(e.target.value);\n    }\n\n    function view() {\n        switch (userInfo[userName].state) {\n            case 'prompt':\n                return (\n                    <div className='gameBoard'>\n                        <div className='headerArea'>\n                            <h1>Round: {gameInfo.round}</h1>\n                            <h2>PromptMaster: {gameInfo.promptMaster}</h2>\n                            <h2>Prompt: {gameInfo.prompt}</h2>\n                        </div>\n                        <div className='responseArea'>\n                            <form onSubmit={(e) => { handlePromptSubmit(e) }}>\n                                <fieldset>\n                                    <input type='input' id='promptInput' value={promptInput} onChange={promptOnChange}/>\n                                    <label htmlFor='prompt'>Prompt</label>\n                                </fieldset>\n                                <button type='submit'>Submit Prompt</button>\n                            </form>\n                        </div>\n                        <div className='playerArea'>\n                            {getUsers()}\n                        </div>\n                    </div>\n                )\n            case 'waiting':\n                return (\n                    <div className='gameBoard'>\n                        <div className='headerArea'>\n                            <h1>Round: {gameInfo.round}</h1>\n                            <h2>PromptMaster: {gameInfo.promptMaster}</h2>\n                            <h2>Prompt: {gameInfo.prompt}</h2>\n                        </div>\n                        <div className='responseArea'>\n                            <p>Waiting for prompt...</p>\n                        </div>\n                        <div className='playerArea'>\n                            {getUsers()}\n                        </div>\n                    </div>\n                )\n            default:\n                return (<p>Something bad happened with userInfo.state</p>)\n        }\n    }\n\n    return (\n        <div>\n            {view()}\n        </div>\n    );\n}\n","import React, { useContext, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { submitResponse } from '../../../actions/actions';\nimport { UserContext } from '../../../utils/UserContext';\nimport { getUsers } from './helperFunctions';\nimport '../style.css';\n\nexport default function Response() {\n    const gameInfo = useSelector(state => state.gameInfo);\n    const userInfo = useSelector(state => state.userInfo);\n    const dispatch = useDispatch();\n    const { userName } = useContext(UserContext);\n    \n    const [responseInput, setResponseInput] = useState('');\n\n    function handleResponseSubmit(e) {\n        e.preventDefault();\n        dispatch(submitResponse(gameInfo.gameID, userName, responseInput));\n        setResponseInput('');\n    }\n\n    function responseOnChange(e) {\n        setResponseInput(e.target.value);\n    }\n\n    function view() {\n        switch (userInfo[userName].state) {\n            case 'noResponse':\n                return (\n                    <div className='gameBoard'>\n                    <div className='headerArea'>\n                        <h1>Round: {gameInfo.round}</h1>\n                        <h2>PromptMaster: {gameInfo.promptMaster}</h2>\n                        <h2>Prompt: {gameInfo.prompt}</h2>\n                    </div>\n                    <div className='responseArea'>\n                        <form onSubmit={(e) => { handleResponseSubmit(e) }}>\n                            <fieldset>\n                                <input type='input' id='responseInput' value={responseInput} onChange={responseOnChange}/>\n                                <label htmlFor='response'>Response</label>\n                            </fieldset>\n                            <button type='submit'>Submit Response</button>\n                        </form>\n                    </div>\n                    <div className='playerArea'>\n                        {getUsers()}\n                    </div>\n                </div>\n                )\n            case 'responded':\n                return (\n                    <div className='gameBoard'>\n                        <div className='headerArea'>\n                            <h1>Round: {gameInfo.round}</h1>\n                            <h2>PromptMaster: {gameInfo.promptMaster}</h2>\n                            <h2>Prompt: {gameInfo.prompt}</h2>\n                        </div>\n                        <div className='responseArea'>\n                            <p>Waiting for all players to submit responses...</p>\n                        </div>\n                        <div className='playerArea'>\n                            {getUsers()}\n                        </div>\n                    </div>\n                )\n            default:\n                return ((<p>Something bad happened with userInfo.state</p>))\n        }\n    }\n\n    return (\n        <div>\n            {view()}\n        </div>\n    );\n}","import React, { useContext } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { submitMatch } from '../../../actions/actions';\nimport { UserContext } from '../../../utils/UserContext';\nimport { turnUserInfoIntoArray } from './helperFunctions';\nimport '../style.css';\nconst shuffle = require('lodash.shuffle');\n\nexport default function Match() {\n    const gameInfo = useSelector(state => state.gameInfo);\n    const userInfo = useSelector(state => state.userInfo);\n    const dispatch = useDispatch();\n    const { userName } = useContext(UserContext);\n\n    function handleMatchSubmit(e, key, response) {\n        let match = {\n            name: key,\n            response: response\n        }\n        e.preventDefault();\n        dispatch(submitMatch(gameInfo.gameID, userName, match));\n    }\n\n    function onDragOver(ev) {\n        ev.preventDefault();\n        let el = ev.target.parentNode.children[0];\n        el.classList.add('dragHover');\n    };\n\n    function onDragEnter(ev){\n        console.log(ev.target.parentNode.children)\n    };\n    \n    function onDragLeave(ev) {\n        let el = ev.target.parentNode.children[0];\n        el.classList.remove('dragHover');\n    }\n    function onDragStart(ev, id) {\n        console.log(\"dragstart: \", id);\n        ev.dataTransfer.setData(\"id\", id);\n    };\n\n    function onDrop(e, ev) {\n        let response = ev.dataTransfer.getData(\"id\");\n        let key = ev.target.parentNode.id;\n        let el = ev.target.parentNode.children[0];\n        el.classList.remove('class', 'dragHover');\n        handleMatchSubmit(e, key, response);\n    }\n\n    function getUsers() {\n        return turnUserInfoIntoArray.map(user)\n    }\n    \n    function user(o) {\n        let userClass = \"player\";\n        let dragEvents = {\n            onDragOver:  e => onDragOver(e),\n            onDragEnter: e => onDragEnter(e),\n            onDragLeave: e => onDragLeave(e),\n            onDrop: e => onDrop(e)\n        }\n        if (o.state === 'eliminated') {\n            userClass = \"player eliminated\";\n            dragEvents = {};\n        }\n        return(\n            <div className={userClass} key={o.userName} id={o.userName} {...dragEvents}>\n                <img src={o.avatar} alt={`${o.userName}'s Avatar`} className=\"playerAvatar lvl1\"/>\n                <h3 className=\"playerName\">{o.userName}</h3>\n                <p className=\"playerScore lvl2\">{o.currentScore}</p>\n            </div>\n        )\n    }\n\n    function getResponses() {\n        let responseList = [];\n        turnUserInfoIntoArray.map(user => \n            responseList.push(user.response)    \n        );\n        shuffle(responseList);\n        return responseList.map(o=> (\n            <p className=\"response\" key={o} draggable onDragStart={e=>onDragStart(e, o)}>{o}</p>\n        ));\n    }\n    \n\n    function view() {\n        switch (userInfo[userName].state) {\n            case 'matching':\n                return (\n                    <div className='gameBoard'>\n                    <div className='headerArea'>\n                        <h1>Round: {gameInfo.round}</h1>\n                        <h2>PromptMaster: {gameInfo.promptMaster}</h2>\n                        <h2>Prompt: {gameInfo.prompt}</h2>\n                    </div>\n                    <div className='responseArea'>\n                        <p>Your turn to match!</p>\n                        {getResponses()}\n                    </div>\n                    <div className='playerArea'>\n                        {getUsers()}\n                    </div>\n                </div>\n                )\n            case 'inline':\n                return (\n                    <div className='gameBoard'>\n                        <div className='headerArea'>\n                            <h1>Round: {gameInfo.round}</h1>\n                            <h2>PromptMaster: {gameInfo.promptMaster}</h2>\n                            <h2>Prompt: {gameInfo.prompt}</h2>\n                        </div>\n                        <div className='responseArea'>\n                            <p>Waiting for your turn to match...</p>\n                            {getResponses()}\n                        </div>\n                        <div className='playerArea'>\n                            {getUsers()}\n                        </div>\n                    </div>\n                )\n                case 'eliminated':\n                    return (\n                        <div className='gameBoard'>\n                            <div className='headerArea'>\n                                <h1>Round: {gameInfo.round}</h1>\n                                <h2>PromptMaster: {gameInfo.promptMaster}</h2>\n                                <h2>Prompt: {gameInfo.prompt}</h2>\n                            </div>\n                            <div className='responseArea'>\n                                <p>Sorry, you have been eliminated.</p>\n                            </div>\n                            <div className='playerArea'>\n                                {getUsers()}\n                            </div>\n                        </div>\n                    )\n            default:\n                return ((<p>Something bad happened with userInfo.state</p>))\n        }\n    }\n\n    return (\n        <div>\n            {view()}\n        </div>\n    );\n}","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getUsers } from './helperFunctions';\nimport { nextRound, gameEnd } from '../../../actions/actions';\nimport '../style.css';\n\nexport default function RoundResults() {\n    const gameInfo = useSelector(state => state.gameInfo);\n    const dispatch = useDispatch();\n\n    function handleNextRoundSubmit(e) {\n        e.preventDefault();\n        dispatch(nextRound(gameInfo.gameID));\n    }\n\n    function handleGameEndSubmit(e) {\n        e.preventDefault();\n        dispatch(gameEnd(gameInfo.gameID));\n    }\n\n    return (\n        <div className='gameBoard'>\n        <div className='headerArea'>\n            <h1>Round: {gameInfo.round}</h1>\n            <h2>PromptMaster: {gameInfo.promptMaster}</h2>\n            <h2>Prompt: {gameInfo.prompt}</h2>\n        </div>\n        <div className='responseArea'>\n            <p>Round has ended!</p>\n        </div>\n        <div className='playerArea'>\n            {getUsers()}\n        </div>\n        <div className='actions'>\n            <button onClick={(e) => handleNextRoundSubmit(e)}>Next Round!</button>\n            <button onClick={(e) => handleGameEndSubmit(e)}>End Game!</button>\n        </div>   \n      </div>\n    );\n}","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getUsers } from './helperFunctions';\nimport { returnToLobby } from '../../../actions/actions';\nimport '../style.css';\n\nexport default function RoundResults() {\n    const gameInfo = useSelector(state => state.gameInfo);\n    // const userInfo = useSelector(state => state.userInfo);\n    const dispatch = useDispatch();\n\n    function handleReturnToLobbySubmit(e) {\n        e.preventDefault();\n        dispatch(returnToLobby(gameInfo.gameID));\n    }\n\n    return (\n        <div className='gameBoard'>\n        <div className='headerArea'>\n            <h1>Round: {gameInfo.round}</h1>\n            <h2>PromptMaster: {gameInfo.promptMaster}</h2>\n            <h2>Prompt: {gameInfo.prompt}</h2>\n        </div>\n        <div className='responseArea'>\n            <p>Game over!</p>\n            <p>Congratulations to the user who won!</p>\n        </div>\n        <div className='playerArea'>\n            {getUsers()}\n        </div>\n        <div className='actions'>\n            <button onClick={(e) => handleReturnToLobbySubmit(e)}>Return To Lobby!</button>\n        </div>   \n      </div>\n    );\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Lobby from './onlineComponents/Lobby';\nimport Prompt from './onlineComponents/Prompt';\nimport Response from './onlineComponents/Response';\nimport Match from './onlineComponents/Match';\nimport RoundResults from './onlineComponents/RoundResults';\nimport FinalResults from './onlineComponents/FinalResults';\nimport \"./style.css\";\n\nexport default function OnlineGame() {\n  const gameInfo = useSelector(state => state.gameInfo);\n\n  function renderGame() {\n    switch (gameInfo.gameState) {\n      case 'lobby':\n        return <Lobby/>\n      case 'prompt':\n        return <Prompt/>\n      case 'responding':\n        return <Response/>\n      case 'matching':\n        return <Match/>\n      case 'roundResults':\n        return <RoundResults/>\n      case 'finalResults':\n        return <FinalResults/>\n      default:\n        return <Lobby/>\n    }\n  }\n  return (\n    <div>\n        {renderGame()}\n    </div>\n  );\n}","import React, { useState, useEffect } from \"react\";\nimport \"./style.css\";\nimport GameHeader from \"../../components/GameHeader\";\nimport OfflineGameStart from \"../../components/OfflineGameStart\";\nimport Players from \"../../components/Players\";\nimport ActionBtns from \"../../components/ActionBtns\";\n\nexport default function OfflineGame() {\n    const [input, setInput] = useState('');\n    const [participantName, setParticipantName] = useState('');\n    const [gameState, setGameState] = useState({});\n    const [roundState, setRoundState] = useState({\n        round: 1,\n        promptmaster: {},\n        matcher: {},\n        players: [],\n        roundQuestion: \"\",\n        //responses: []\n    });\n    useEffect(()=> {\n        setGameState({\n            gameId: 5564,\n            participants: [\n                // {\n                //     id: 1,\n                //     name: \"Cathy\", \n                //     avatar: \"images/avatars/woman1.svg\",\n                //     score: 0, \n                //     position: 0,\n                //     response:\"\",\n                //     isEliminated: false,\n                //     matcher: false,\n                //     promptmaster: true\n                // },\n                // {\n                //     id: 2,\n                //     name: \"Mark\", \n                //     avatar: \"images/avatars/man1.svg\",\n                //     score: 0, \n                //     position: 1,\n                //     response:\"\",\n                //     isEliminated: false,\n                //     matcher: true,\n                //     promptmaster: false\n                // },\n                // {\n                //     id: 3,\n                //     name: \"Karen\", \n                //     avatar: \"images/avatars/woman2.svg\",\n                //     score: 0, \n                //     position: 2,\n                //     response:\"\",\n                //     isEliminated: false,\n                //     matcher: false,\n                //     promptmaster: false\n                // },\n                // {\n                //     id: 4,\n                //     name: \"Scottie\", \n                //     avatar: \"images/avatars/man2.svg\",\n                //     score: 0,\n                //     position: 3, \n                //     response:\"\",\n                //     isEliminated: false,\n                //     matcher: false,\n                //     promptmaster: false\n                // },\n                // {\n                //     id: 5,\n                //     name: \"Margaret\", \n                //     avatar: \"images/avatars/woman3.svg\",\n                //     score: 0, \n                //     position: 4, \n                //     response:\"\",\n                //     isEliminated: false,\n                //     matcher: false,\n                //     promptmaster: false\n                // },\n                // {\n                //     id: 6,\n                //     name: \"Dave\", \n                //     avatar: \"images/avatars/man3.svg\",\n                //     score: 0, \n                //     position: 5, \n                //     response:\"\",\n                //     isEliminated: false,\n                //     matcher: false,\n                //     promptmaster: false\n                // }\n            ]\n        });\n    },[]);\n    function seeState() {\n        console.log(\"GS \", gameState);\n        console.log(\"RS \", roundState);\n    }\n    function createParticipant(input) {\n        const {participants} = { ...gameState };\n        const enteredParticipants = [...participants];\n        let newParticipant = {\n            name: input, \n            avatar: \"images/avatars/woman1.svg\",\n            score: 0, \n            position: 0,\n            response:\"\",\n            isEliminated: false,\n            matcher: false,\n            promptmaster: false\n        };\n        enteredParticipants.push(newParticipant)\n        setGameState({\n            ...gameState,\n            participants: enteredParticipants\n        })\n        console.log(gameState);\n    }\n    function startGame(){\n        console.log('start game')\n    }\n    function startRound() {\n        if(gameState.participants) {\n            const { participants } = { ...gameState };\n            const roundQuestion = prompt(`${JSON.stringify(participants[0].name)}, what is the category`);\n            const matcher = participants.find(o=> o.matcher );\n            const promptmaster = participants.find( o=> o.promptmaster );\n            \n            for(let i=0; i< participants.length; i++ ) {\n                let playerResponse = prompt(`${JSON.stringify(participants[i].name)}, the category is ${(roundQuestion) ? roundQuestion.toUpperCase() : null }. Please enter your response`);\n                \n                let matchedParticpant = participants.indexOf(participants.find(o => o.name === participants[i].name));\n                let updatedParticipants = [...participants];\n                updatedParticipants[matchedParticpant].response = playerResponse;\n                setGameState({\n                    ...gameState,\n                    participants: updatedParticipants\n                });\n            }\n            setRoundState({\n                ...roundState,\n                round: roundState.round,\n                promptmaster: promptmaster,\n                matcher: matcher,\n                roundQuestion: roundQuestion,\n            });\n        }\n        else { console.log('start failed')}\n    };\n    function endRound() {\n        if (roundState.round <= ( gameState.participants.length - 1 )){\n            const {participants} = gameState;\n            const newOrder = participants.forEach(o=>{\n                o.position = o.position -1;\n                o.response = \"\";\n                if (o.position <=-1) o.position = participants.length - 1;\n                o.isEliminated = false;\n                if(o.position === 0) {\n                    o.promptmaster = true;\n                } else {\n                    o.promptmaster = false;\n                }\n                if(o.position === 1) {\n                    o.matcher = true;\n                } else {\n                    o.matcher = false;\n                }\n            });\n            const updatedGameState = { ...gameState };\n            const roundArray = updatedGameState.participants.sort((a,b) => (a.position > b.position) ? 1 : -1);\n            console.log(newOrder);\n            setGameState({\n                ...gameState,\n                participants: roundArray\n            })\n            setRoundState({\n                ...roundState,\n                round: (roundState.round + 1),\n                promptmaster: gameState.participants[0],\n                players: [],\n                roundQuestion: \"\",\n                responses: []\n            });\n        } else {\n            console.log('congrats the game is over')\n            const updatedGameState = { ...gameState };\n            const roundArray = updatedGameState.participants.sort((a,b) => (a.score > b.score) ? -1 : 1);\n            return (\n                console.log('the winner is ',roundArray[0])\n                // <div>\n                //     <p>The game is over,</p>\n                //     <h2>and the winner is...</h2>\n                //     <img src={roundArray[0].avatar} alt={`${roundArray[0].name}'s avatar`}/>\n                //     <h1>{roundArray[0].name}</h1>\n                //     <button onClick={()=>{startGame()}}>New Game</button>\n                //     <button onClick={()=>{endGame()}}>Main Menu</button>\n                // </div>\n            )\n        }\n    }\n    function scoreboard() {\n        console.log('finished');\n        return <button onClick={()=>endRound()}>End Round</button>\n    }\n    function onDragOver(ev) {\n        ev.preventDefault();\n        let el = ev.target.parentNode.children[0];\n        el.classList.add('dragHover');\n    };\n    function onDragEnter(ev){\n        console.log(ev.target.parentNode.children)\n    };\n    function onDragLeave(ev) {\n        let el = ev.target.parentNode.children[0];\n        el.classList.remove('dragHover');\n    }\n    function onDragStart(ev, id) {\n        console.log(\"dragstart: \", id);\n        ev.dataTransfer.setData(\"id\", id);\n    };\n    function onDrop(ev) {\n        let id = ev.dataTransfer.getData(\"id\");\n        let pId = ev.target.parentNode.id;\n        let el = ev.target.parentNode.children[0];\n        el.classList.remove('class', 'dragHover');\n        const { participants } = { ...gameState };\n        if (id === pId) {\n            console.log('match!');\n            //const { participants } = { ...gameState };\n            const matchedParticpant = participants.indexOf(participants.find(o => o.name === pId));\n            const matchingParticipant = participants.indexOf(participants.find(o => o.matcher));\n            const updatedParticipants = [...participants];\n            updatedParticipants[matchedParticpant].isEliminated = true;\n            updatedParticipants[matchingParticipant].score += 1;\n            setGameState({\n                ...gameState,\n                participants: updatedParticipants,\n            });\n        }else {\n            console.log('not a match');\n            const filterPrompt = participants.filter( o => !o.promptmaster );\n            const filterEliminatedUsers = filterPrompt.filter( o => !o.isEliminated );\n            const incorrectMatch = filterEliminatedUsers.indexOf(filterEliminatedUsers.find(o => o.matcher));\n            const nextMatcher = filterEliminatedUsers[(incorrectMatch + 1) % filterEliminatedUsers.length];\n            const oldMatcher = participants.indexOf(participants.find(o => o.name === filterEliminatedUsers[incorrectMatch].name));\n            const newMatcher = participants.indexOf(participants.find(o => o.name === nextMatcher.name));\n\n            const updatedParticipants = [...participants];\n            updatedParticipants[oldMatcher].matcher = false;\n            updatedParticipants[newMatcher].matcher = true;\n\n            setGameState({\n                ...gameState,\n                participants: updatedParticipants\n            });\n            setRoundState({\n                ...roundState,\n                matcher: updatedParticipants[newMatcher]\n            })\n        }\n    }\n    function player(o) {\n        let playerClass = \"player\";\n        let dragEvents = {\n            onDragOver:  e => onDragOver(e),\n            onDragEnter: e => onDragEnter(e),\n            onDragLeave: e => onDragLeave(e),\n            onDrop: e=> onDrop(e)\n        }\n        if (o.isEliminated || o.promptmaster) {\n            playerClass = \"player eliminated\";\n            dragEvents = {};\n        }\n        return(\n            <div className={playerClass} key={o.id} id={o.name} {...dragEvents}>\n                <img src={o.avatar} alt={`${o.name}'s Avatar`} className=\"playerAvatar lvl1\"/>\n                <h3 className=\"playerName\">{o.name}</h3>\n                <p className=\"playerScore lvl2\">{o.score}</p>\n            </div>\n        )\n    }\n\n    function getPlayers() {\n        if (gameState.participants) {\n            return gameState.participants.map(player);\n        }\n    }\n    function getAnswers() {\n        if (gameState.participants) {\n            const { participants } = { ...gameState };\n            const array = participants;\n            const filteredUsers = array.filter(o => !o.isEliminated);\n            if(filteredUsers[0]){\n                let shuffledArray = [...filteredUsers];\n                let len = filteredUsers.length;\n                if (len > 2) {\n                    for(let i = 0; i < len; i += 1) {\n                        let randomIndex = Math.floor(Math.random() * len);\n                        [shuffledArray[i], shuffledArray[randomIndex]] = [shuffledArray[randomIndex], shuffledArray[i]];\n                    }\n                    return shuffledArray.map(o=> (\n                        <p className=\"response\" key={o.id} draggable onDragStart={e=>onDragStart(e, o.name)}>{o.response}</p>\n                    ));\n                } else {\n                    return scoreboard();\n                }\n            }\n        }\n    }\n    return (\n        <div className=\"registration\">\n            <form>\n                <fieldset>\n                    <input type=\"name\" id=\"participantName\" value={input} onChange={e=> setInput(e.target.value)} />\n                    <label for=\"participantName\">Enter your name</label>\n                </fieldset>\n                <button type=\"submit\" id=\"createParticipant\" onClick={(e)=>{\n                    e.preventDefault();\n                    createParticipant(input)\n                }}>Create Player</button>\n            </form>\n            <button onClick={()=>startGame()}>Start Game</button>\n            <button onClick={()=>seeState()}>See State</button>\n        </div>\n        // <div className=\"gameBoard\">\n        //     <GameHeader {...roundState}/>\n        //     <div className=\"responseArea\">\n        //         {getAnswers()}\n        //     </div>\n        //     <div className=\"playerArea\">\n        //         {getPlayers()}\n        //         {/* <Players {...gameState} /> */}\n        //     </div>\n        //     {/* <ActionBtns /> */}\n        //     <div className=\"actions\">\n        //         <button onClick={()=>startRound()}>Start Round</button>\n        //         <button onClick={()=>endRound()}>End Round</button>\n        //         <button onClick={()=>seeState()}>See State</button>\n        //     </div>\n        // </div>\n    )\n}","import React, {useContext} from 'react';\nimport './style.css'\n\nfunction SelectAvatar(props){\n  return(\n    <img \n      className=\"SelectAvatar-avatarOption\" \n      onClick={()=>props.onClick(props.imgPath)} \n      src={props.imgPath}\n      alt={`Select avatar ${props.imgPath.substring(props.imgPath.lastIndexOf('/')+1, props.imgPath.indexOf('.'))}`}\n    />\n  )\n};\n\nexport default SelectAvatar;\n","import React, { useState, useRef, useEffect, useContext } from \"react\";\nimport {Link, Redirect} from \"react-router-dom\";\nimport \"./style.css\";\nimport Axios from \"axios\";\nimport {UserContext} from '../../utils/UserContext';\nimport SelectAvatar from '../../components/SelectAvatar';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { newGame, joinGame, setError } from '../../actions/actions';\n\nexport default function Title() {\n    const {userName, userWins, userAvatar, changeAvatar, isAuthenticated, changeAuthenticated, getUser} = useContext(UserContext);\n    const [inputType, setInputType] = useState(\"password\");\n    const [loginError, setLoginError] = useState(null);\n    const [signupError, setSignupError] = useState(null);\n    const [redirect, setRedirect] = useState(false);\n    const pwInput = useRef(null);\n    const emailInput = useRef(null);\n    const [gameIDInput, setGameIDInput] = useState('');\n    const dispatch = useDispatch();\n    const gameInfo = useSelector(state => state.gameInfo);\n    const userInfo = useSelector(state => state.userInfo);\n\n    console.log('gameInfo', gameInfo)\n  \n    function setUser(val){\n        const userInfo = {\n            email: emailInput.current.value,\n            userName: emailInput.current.value.substring(0, emailInput.current.value.indexOf('@')), \n            password: pwInput.current.value\n        };\n        if(val === 'register'){\n            console.log('you clicked register')\n            Axios.post('/user/signup', userInfo)\n            .then(function (response){\n                console.log('success!')\n                setSignupError('Success! You can now click \"Log In\" with those credentials.')\n            })\n            .catch(function (error) {\n                setSignupError('User already exists with that email.')\n            });\n        } else if (val === 'login'){\n            Axios.post('/user/login', userInfo)\n            .then(function (response) {\n                // changeToken(response.data.token);\n                // changeUserId(response.data.user._id);\n                changeAuthenticated(response.data.token, response.data.user._id);\n            })\n            .catch(function (error) {\n                console.log(error);\n                setLoginError('We found no user with those credentials.')\n            });\n        }\n    }\n\n    function showAvatars(){\n        const aviOptions = ['man1', 'woman1','man2', 'woman2','man3', 'woman3','man4', 'woman4',]\n        return aviOptions.map((item, index) => {\n            return <SelectAvatar key={index} onClick={changeAvatar} imgPath={`images/avatars/${item}.svg`} />      \n        })\n    }\n\n    function copyGameID(){\n        var copyText = document.querySelector('#gameID');\n        copyText.select();\n        copyText.setSelectionRange(0, 99999)\n        document.execCommand('copy');\n        alert(`Copied game id ${copyText.value} to your clipboard. Invite your friends!`)\n    }\n\n    function copyBtn(){\n        if(gameInfo.gameID){\n            return (\n            <div>\n                <input id=\"gameID\" value={gameInfo.gameID} readOnly></input>\n                <button onClick={()=>copyGameID()}>Copy to clipboard</button>\n            </div>\n            )\n        }\n    }\n\n    function enterBtn(){\n        if(gameInfo.gameID){\n            return <Link to=\"/onlineGame\"><button>Enter Game</button></Link>\n        }\n    }\n\n    function isLoggedIn(){\n        if(isAuthenticated){\n            \n            return(\n                <div>\n                    <h1>Welcome, {userName}!</h1>\n                    <p>Current game:</p>\n                    {copyBtn()}\n\n                    <img className=\"userAvatar\" src={userAvatar} />\n                    <div>\n                    {showAvatars()}\n                    </div>\n\n                    <button id=\"signout\" onClick={() => changeAuthenticated('', '')}>Not You? Switch Users</button>\n                    {/* <a id=\"createOnlineGame\" href=\"/onlinegame\">Create Game</a>\n                    <a id=\"joinOnlineGame\" href=\"/onlinegame\">Join Game</a> */}\n                    <button id=\"createOnlineGame\" onClick={(e)=>newOnlineGame(e)}>Create New Game</button>\n                    <form>\n                      <fieldset>\n                        <input type='input' value={gameIDInput} onChange={gameIDChange}/>\n                        <label htmlFor=\"joinGameID\">GameID</label>\n                      </fieldset>\n                    </form>\n                    <button id=\"joinOnlineGame\" onClick={(e)=>joinOnlineGame(e)}>Join Existing Game</button>\n                    {enterBtn()}\n                </div>\n                )\n        }\n    }\n\n    function showForm(){\n        if(!isAuthenticated){\n            return (\n            <div>\n                <div id=\"errors\">\n                {loginError || signupError}\n                </div>\n                <form>\n                    <fieldset>\n                        <input type=\"name\" \n                        onChange={()=>{\n                            setLoginError(null) \n                            setSignupError(null)\n                            }} \n                        id=\"username\" \n                        ref={emailInput} \n                        required/>\n                        <label htmlFor=\"username\">Email</label>\n                    </fieldset>\n                    <fieldset>\n                        <input type={inputType} \n                        onChange={()=>{\n                            setLoginError(null) \n                            setSignupError(null)\n                            }} \n                        id=\"password\" \n                        ref={pwInput} \n                        required/>\n                        <label htmlFor=\"password\">Password</label>\n                    </fieldset>\n                    <label aria-hidden=\"true\" className=\"pwToggle\"><input type=\"checkbox\" onClick={showPassword} /> Show Password</label>\n                </form>\n                <div id=\"msgArea\"></div>\n                <button id=\"loginSubmit\" onClick={()=>setUser('login')}>Log In</button>\n                <button id=\"signup\" onClick={()=>setUser('register')}>Sign Up</button>\n            </div>\n            )\n        }\n    }\n\n    function showPassword() {\n        if (inputType === \"password\") {\n            setInputType(\"text\");\n        } else {\n            setInputType(\"password\");\n        }\n    }\n\n    function newOnlineGame(e) {\n        e.preventDefault();\n        console.log(userName);\n        dispatch(newGame(userName, userAvatar));\n        window.location.assign('localhost:3000/onlinegame')\n    }\n\n    function joinOnlineGame(e) {\n        e.preventDefault();\n        console.log(gameIDInput);\n        if (gameIDInput !== '') {\n            dispatch(joinGame(gameIDInput, userName, userAvatar));\n            // window.location.assign('localhost:3000/onlineGame')\n            setRedirect(true);\n        }\n        else {\n            dispatch(setError('Game code can not be blank'));\n        }\n    }\n\n    function gameIDChange(e) {\n        setGameIDInput(e.target.value);\n    }\n\n    return (\n        <section className=\"titleScreen\">\n            {isLoggedIn()}\n            {showForm()}\n            {redirect && <Redirect to=\"/onlineGame\" />}\n            <a id=\"offlineGameInit\" href=\"/offlinegame\">Start Local Game</a>\n        </section>\n    )\n}","import React from \"react\";\nimport \"./style.css\";\n\nexport default function Color(){\n    return (\n        <div className=\"colorBox\">\n            <span className=\"color color1\"></span>\n            <span className=\"color color2\"></span>\n            <span className=\"color color3\"></span>\n            <span className=\"color color4\"></span>\n            <span className=\"color color5\"></span>\n        </div>\n    )\n}","const defaultError = {};\n\nexport default function errorReducer(error = defaultError, action) {\n    switch (action.type) {\n        case 'error':\n            return error = action.payload;\n        default:\n            return error;\n    }\n}","import { combineReducers } from 'redux';\nimport gameInfoReducer from './gameInfo';\nimport userInfoReducer from './userInfo';\nimport errorReducer from './error';\n\nconst rootReducer = combineReducers({\n  gameInfo: gameInfoReducer,\n  userInfo: userInfoReducer,\n  error: errorReducer\n});\n\nexport default rootReducer;","export default function gameInfoReducer(gameInfo = {}, action) {\n  switch (action.type) {\n    case 'gameInfo':\n      return gameInfo = action.payload;\n    default:\n      return gameInfo;\n  }\n} ","export default function userInfoReducer(userInfo = {}, action) {\n    switch (action.type) {\n        case 'userInfo':\n            return userInfo = action.payload;\n        default:\n            return userInfo\n    }\n}","import React, {useState} from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport OnlineGame from \"./pages/Online\";\nimport OfflineGame from \"./pages/Offline\";\nimport Title from \"./pages/Title\";\nimport UserProvider from \"./utils/UserContext.js\";\nimport Color from \"./components/colorBox\";\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './reducers/root';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n    <UserProvider>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Title} />\n          {localStorage.getItem('thingsAuthToken') && <Route exact path=\"/onlineGame\" component={OnlineGame} />}\n          <Route exact path=\"/offlinegame\" component={OfflineGame} />\n        </Switch>\n      </Router>\n      <Color />\n    </UserProvider>\n    </Provider>\n  );\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\n// import { createStore, applyMiddleware } from 'redux';\n// import rootReducer from './reducers/root';\n// import { Provider } from 'react-redux';\n// import thunk from 'redux-thunk';\n\n// const store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  // <Provider store={store}>\n    <App />\n  , document.getElementById(\"root\"));"],"sourceRoot":""}